import stdio
import declassifyutil
import lists

let 
    fun loop () = 
        let 
            val _ = printString "Waiting for response..."
            val newResponse = receive [hn ("NEWMATCH", profile) => profile]
            val (lev, name, year, gender, interests) = newResponse
            val _ = printString("Match found: " ^ name)
        in 
            ()
        end

    fun aliceClient server_id =
        let 
            val levAlice = `{alice}`
            val nameAlice = "Alice" 
            val yearAlice = 2105 
            val genderAlice = true
            val interestsAlice = ["dragons", "wars", "fire"]
            val aliceProfile = (levAlice, nameAlice, yearAlice, genderAlice, interestsAlice)

            fun shareInterest [] _ = false
            | shareInterest (x::xs) ys = 
                if elem x ys then true
                else shareInterest xs ys


            fun aliceAgent profileOther =
                let
                    val (levOther, nameOther, yearOther, genderOther, interestsOther) = profileOther

                    val matchAge = yearOther = yearAlice 

                    val matchInterests = shareInterest interestsAlice interestsOther 

                    val match = matchAge andalso matchInterests

                    val maybeProfile = 
                        if match then
                            aliceProfile
                        else
                            ()
                in
                    (match, maybeProfile)

                end

            val _ = send (server_id, ("NEWPROFILE", (aliceProfile, aliceAgent, self())))

        in 
            loop ()
        end

    val serverId = whereis ("@datingServer", "datingServer")
in
    spawn (fn () => aliceClient serverId)
end



